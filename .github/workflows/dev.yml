name: Deploy

on:
  push:
    branches:
      - dev

jobs:
  lint:
    name: Lint Checks
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        
      - name: golangci-lint
        uses: reviewdog/action-golangci-lint@v2
        
      - name: yamllint
        uses: reviewdog/action-yamllint@v1
        with:
          reporter: github-pr-review
          yamllint_flags: '-d "{extends: default, rules: {truthy: disable}}" .'
          
      - name: hadolint
        uses: reviewdog/action-hadolint@v1
        with:
          reporter: github-pr-review

      - uses: actions/setup-go@v2
      - name: WriteGoList
        run: go list -json -m all > go.list
      - name: Nancy
        uses: sonatype-nexus-community/nancy-github-action@main
        continue-on-error: true

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: lint
    environment: dev

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Docker Image
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./deployments/prod/Dockerfile
        push: true
        tags: ${{ vars.DOCKER_USERNAME }}/${{ vars.DOCKER_CONTAINER_USERNAME }}:latest
    
    - name: Run migrations
      run: |
        docker run --rm \
          -v ${{ github.workspace }}/migrations:/migrations \
          migrate/migrate \
          -path=/migrations \
          -database ${{ vars.POSTGRES_CONN }} up

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: dev
    
    steps:
      - name: SSH into VPS and Deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }} 
          username: ${{ secrets.VPS_USER }}  
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e

            docker login --username ${{ vars.DOCKER_USERNAME }} --password ${{ secrets.DOCKER_PASSWORD }}
            docker stop ${{ vars.DOCKER_CONTAINER_USERNAME }} || true
            docker rm ${{ vars.DOCKER_CONTAINER_USERNAME }} || true
            docker rmi -f ${{ vars.DOCKER_USERNAME }}/${{ vars.DOCKER_CONTAINER_USERNAME }} || true
            docker pull ${{ vars.DOCKER_USERNAME }}/${{ vars.DOCKER_CONTAINER_USERNAME }}:latest

            docker run -d \
              --name ${{ vars.DOCKER_CONTAINER_USERNAME }} \
              --restart always \
              -p ${{ vars.APP_PORT }}:8080 \
              -v ${{ vars.JWT_HOST_PUBLIC_KEY_PATH }}:/jwt:ro \
              --env SERVER_ADDRESS=${{ vars.SERVER_ADDRESS }} \
              --env JWT_KEY_PATH=${{ vars.JWT_KEY_PATH }} \
              --env POSTGRES_CONN="${{ vars.POSTGRES_CONN }}" \
              --env REDIS_CONN=${{ vars.REDIS_CONN }} \
              --env CACHE_EXPIRATION=${{ vars.CACHE_EXPIRATION }} \
              --env SWAGGER_PATH=${{ vars.SWAGGER_PATH }} \
              --network ${{ secrets.NETWORK_NAME }} \
              ${{ vars.DOCKER_USERNAME }}/${{ vars.DOCKER_CONTAINER_USERNAME }}:latest