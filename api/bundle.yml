openapi: 3.0.3
info:
  title: Ubrato core
  description: ubrato core oas
  version: 1.0.0
servers:
  - description: local
    url: /
  - description: dev
    url: https://api.ubrato.ru
paths:
  /v1/categories:
    get:
      tags:
        - categories
      summary: Получить все категории с должностями
      description: Возвращает все категории с публичными должностями
      responses:
        '200':
          description: Все категории с должностями успешно получены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoriesPostsResp'
        '404':
          description: Категории не найдены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Неизвестная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/admin/categories:
    get:
      tags:
        - categories
      summary: Получить все категории
      description: Возвращает список всех категорий с возможностью пагинации
      security:
        - adminBearerAuth: []
      parameters:
        - name: page
          in: query
          description: Номер страницы для пагинации
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: per_page
          in: query
          description: Количество категорий на странице
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
      responses:
        '200':
          description: Список категорий успешно получен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoriesResp'
        '400':
          description: Некорректные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Неавторизованный доступ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Категории не найдены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Неизвестная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - categories
      summary: Добавить категорию
      description: Создает новую категорию
      security:
        - adminBearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryPost'
      responses:
        '201':
          description: Категория успешно добавлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Некорректные данные.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Неавторизованный доступ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Категория с таким названием уже существует
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Неизвестная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/admin/categories/{categoryID}:
    put:
      tags:
        - categories
      summary: Обновить категорию по ID
      description: Обновляет категорию по ее уникальному идентификатору.
      security:
        - adminBearerAuth: []
      parameters:
        - in: path
          name: categoryID
          schema:
            type: integer
            minimum: 1
          required: true
          description: Уникальный идентификатор категории
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryPut'
      responses:
        '200':
          description: Категория успешно обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Некорректные данные.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Неавторизованный доступ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Категория не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Категория с таким названием уже существует
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Неизвестная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - categories
      summary: Удаление категории по ID
      description: Удаляет категорию по ее уникальному идентификатору.
      security:
        - adminBearerAuth: []
      parameters:
        - in: path
          name: categoryID
          schema:
            type: integer
            minimum: 1
          required: true
          description: Уникальный идентификатор категории
      responses:
        '204':
          description: Категория успешно удалена
        '401':
          description: Неавторизованный доступ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Категория не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Нельзя удалить категорию, так как на нее ссылаются должности
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Неизвестная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/admin/filters:
    post:
      tags:
        - filters
      summary: Создать новый фильтр
      description: Создает новый фильтр с уникальным словом.
      security:
        - adminBearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - word
              properties:
                word:
                  type: string
                  description: Уникальный фильтр.
                  maxLength: 100
                  example: example
      responses:
        '201':
          description: Фильтр успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter'
        '400':
          description: Некорректные данные.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Неавторизованный доступ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Фильтр уже существует.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Неизвестная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - filters
      summary: Получить все фильтры
      description: Возвращает список всех фильтров с возможностью пагинации
      security:
        - adminBearerAuth: []
      parameters:
        - name: page
          in: query
          description: Номер страницы для пагинации
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: per_page
          in: query
          description: Количество фильтров на странице
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
      responses:
        '200':
          description: Список фильтров успешно получен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FiltersResp'
        '400':
          description: Некорректные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Неавторизованный доступ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Фильтры не найдены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Неизвестная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/admin/filters/{filterID}:
    delete:
      tags:
        - filters
      summary: Удалить фильтр по ID
      description: Удаляет фильтр по его уникальному идентификатору.
      security:
        - adminBearerAuth: []
      parameters:
        - name: filterID
          in: path
          required: true
          description: Уникальный идентификатор фильтра.
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Фильтр успешно удален
        '401':
          description: Неавторизованный доступ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Фильтр не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Неизвестная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/analytics/{analyticID}:
    get:
      tags:
        - analytics
      summary: Получить аналитику по ID
      description: Возвращает аналитику, включая навыки и ключевые слова по уникальному идентификатору аналитики.
      parameters:
        - name: analyticID
          in: path
          required: true
          description: Уникальный идентификатор аналитики.
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Успешно получена аналитика с словами
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticWords'
        '400':
          description: Некорректные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Аналитика с данным ID не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Неизвестная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/admin/analytics:
    post:
      tags:
        - analytics
      summary: Создать новую запись аналитики
      description: Создает новую запись аналитики.
      security:
        - adminBearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyticPost'
      responses:
        '201':
          description: Аналитика успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Analytic'
        '400':
          description: Некорректные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Неавторизованный доступ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Пост не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Должность не найдена.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Неизвестная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - analytics
      summary: Получить всю аналитику
      description: Возвращает список всех аналитик с возможностью пагинации.
      security:
        - adminBearerAuth: []
      parameters:
        - name: page
          in: query
          description: Номер страницы для пагинации
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: per_page
          in: query
          description: Количество записей на странице
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
      responses:
        '200':
          description: Список аналитик успешно получен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsResp'
        '400':
          description: Некорректные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Неавторизованный доступ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Аналитика не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Неизвестная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/admin/analytics/{analyticID}:
    put:
      tags:
        - analytics
      summary: Обновить аналитику по ID
      description: Обновляет аналитику по ее уникальному идентификатору.
      security:
        - adminBearerAuth: []
      parameters:
        - name: analyticID
          in: path
          required: true
          description: Уникальный идентификатор аналитики.
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyticPut'
      responses:
        '200':
          description: Аналитика успешно обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Analytic'
        '400':
          description: Некорректные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Неавторизованный доступ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Аналитика не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Должность не найдена.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Неизвестная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - analytics
      summary: Удалить аналитику по ID
      description: Удаляет аналитику по уникальному идентификатору.
      security:
        - adminBearerAuth: []
      parameters:
        - name: analyticID
          in: path
          required: true
          description: Уникальный идентификатор аналитики.
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Аналитика успешно удалена
        '401':
          description: Неавторизованный доступ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Аналитика не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Неизвестная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/admin/positions:
    post:
      tags:
        - positions
      summary: Создать новую должность
      description: Создает новую должность.
      security:
        - adminBearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PositionPost'
      responses:
        '201':
          description: Должность успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Position'
        '400':
          description: Некорректные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Неавторизованный доступ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Категория не найдена.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Неизвестная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - positions
      summary: Получить все должности
      description: Возвращает список всех должностей с возможностью пагинации.
      security:
        - adminBearerAuth: []
      parameters:
        - name: page
          in: query
          description: Номер страницы для пагинации
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: per_page
          in: query
          description: Количество должностей на странице
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
      responses:
        '200':
          description: Список должностей успешно получен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PositionsResp'
        '400':
          description: Некорректные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Неавторизованный доступ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Должности не найдены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Неизвестная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/admin/positions/{positionID}:
    put:
      tags:
        - positions
      summary: Изменить должность по ID
      description: Обновляет должность по уникальному идентификатору.
      security:
        - adminBearerAuth: []
      parameters:
        - name: positionID
          in: path
          required: true
          description: Уникальный идентификатор должности
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PositionPut'
      responses:
        '200':
          description: Должность успешно обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Position'
        '400':
          description: Некорректные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Неавторизованный доступ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Должность не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Категория не найдена.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Неизвестная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - positions
      summary: Удалить должность по ID
      description: Удаляет должность по уникальному идентификатору.
      security:
        - adminBearerAuth: []
      parameters:
        - name: positionID
          in: path
          required: true
          description: Уникальный идентификатор должности
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Должность успешно удалена
        '400':
          description: Некорректные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Неавторизованный доступ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Должность не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Неизвестная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    adminBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      required:
        - message
        - details
      properties:
        message:
          type: string
          description: error message
          example: Invalid
        details:
          type: object
          additionalProperties: true
    CategoriesPostsResp:
      type: object
      additionalProperties:
        type: array
        items:
          type: object
          required:
            - logo_id
            - title
            - public
          properties:
            logo_id:
              type: integer
              description: Идентификатор логотипа.
              example: 1
            title:
              type: string
              description: Заголовок должности.
              maxLength: 100
              example: Заголовок поста
            public:
              type: boolean
              description: Является ли пост публичным.
              example: true
    Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Golang
        public:
          type: boolean
          example: true
      required:
        - id
        - title
        - public
    CategoriesResp:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        page:
          type: integer
          example: 0
        pages:
          type: integer
          example: 13
        per_page:
          type: integer
          example: 1
      required:
        - data
        - page
        - pages
        - per_page
    CategoryPost:
      type: object
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 50
          example: Golang
        public:
          type: boolean
          example: true
      required:
        - title
        - public
    CategoryPut:
      type: object
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 50
          example: Golang
        public:
          type: boolean
          example: true
    Filter:
      type: object
      required:
        - id
        - word
      properties:
        id:
          type: integer
          description: Уникальный идентификатор фильтра.
          example: 1
        word:
          type: string
          description: Уникальный фильтр.
          maxLength: 100
          example: example
    FiltersResp:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Filter'
        page:
          type: integer
          example: 0
        pages:
          type: integer
          example: 13
        per_page:
          type: integer
          example: 1
      required:
        - data
        - page
        - pages
        - per_page
    Analytic:
      type: object
      required:
        - id
        - post_title
        - search_query
        - parse_at
      properties:
        id:
          type: integer
          description: Уникальный идентификатор аналитики.
          example: 1
        post_title:
          type: string
          description: Заголовок должности.
          maxLength: 100
          example: Заголовок поста
        search_query:
          type: string
          description: Фильтр поискового запроса hh.ru для аналитики.
          example: text=go
        parse_at:
          type: string
          description: Дата и время последнего обновления записи.
          format: date-time
          example: '2024-12-08T15:30:00Z'
    Word:
      type: object
      properties:
        word:
          type: string
          description: Слово
          example: example
        mentions:
          type: integer
          description: Количество упоминаний данного слова
          example: 15
      required:
        - word
        - mentions
    AnalyticWords:
      type: object
      properties:
        analytic:
          $ref: '#/components/schemas/Analytic'
        skills:
          type: array
          items:
            $ref: '#/components/schemas/Word'
          description: Список навыков
        keywords:
          type: array
          items:
            $ref: '#/components/schemas/Word'
          description: Список ключевых слов
      required:
        - analytic
        - skills
        - keywords
    AnalyticsResp:
      type: object
      required:
        - data
        - page
        - pages
        - per_page
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Analytic'
        page:
          type: integer
          example: 0
        pages:
          type: integer
          example: 13
        per_page:
          type: integer
          example: 1
    AnalyticPost:
      type: object
      required:
        - post_id
        - search_query
      properties:
        post_id:
          type: integer
          description: Идентификатор должности.
          example: 1
        search_query:
          type: string
          description: Фильтр поискового запроса hh.ru для аналитики.
          example: text=go
    AnalyticPut:
      type: object
      properties:
        posts_id:
          type: integer
          description: Идентификатор должности.
          example: 1
        search_query:
          type: string
          description: Фильтр поискового запроса hh.ru для аналитики.
          example: text=go
    Position:
      type: object
      required:
        - categories_id
        - logo_id
        - title
        - public
      properties:
        id:
          type: integer
          description: Уникальный идентификатор поста.
          example: 1
        category:
          $ref: '#/components/schemas/Category'
        logo_id:
          type: integer
          description: Идентификатор логотипа.
          example: 1
        title:
          type: string
          description: Заголовок поста.
          maxLength: 100
          example: Заголовок поста
        public:
          type: boolean
          description: Является ли пост публичным.
          example: true
    PositionsResp:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Position'
        total:
          type: integer
          description: Общее количество постов.
          example: 10
        page:
          type: integer
          description: Текущая страница.
          example: 1
        per_page:
          type: integer
          description: Количество постов на странице.
          example: 20
    PositionPost:
      type: object
      required:
        - category_id
        - logo_id
        - title
        - public
      properties:
        category_id:
          type: integer
          description: Идентификатор категории.
          example: 1
        logo_id:
          type: integer
          description: Идентификатор логотипа.
          example: 1
        title:
          type: string
          description: Заголовок поста.
          maxLength: 100
          example: Заголовок поста
        public:
          type: boolean
          description: Является ли пост публичным.
          example: true
    PositionPut:
      type: object
      properties:
        category_id:
          type: integer
          description: Идентификатор категории.
          example: 1
        logo_id:
          type: integer
          description: Идентификатор логотипа.
          example: 1
        title:
          type: string
          description: Заголовок поста.
          maxLength: 100
          example: Заголовок поста
        public:
          type: boolean
          description: Является ли пост публичным.
          example: true
