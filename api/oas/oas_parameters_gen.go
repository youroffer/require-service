// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// V1AdminCategoriesCategoryIDDeleteParams is parameters of DELETE /v1/admin/categories/{categoryID} operation.
type V1AdminCategoriesCategoryIDDeleteParams struct {
	// Уникальный идентификатор категории.
	CategoryID int
}

func unpackV1AdminCategoriesCategoryIDDeleteParams(packed middleware.Parameters) (params V1AdminCategoriesCategoryIDDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "categoryID",
			In:   "path",
		}
		params.CategoryID = packed[key].(int)
	}
	return params
}

func decodeV1AdminCategoriesCategoryIDDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params V1AdminCategoriesCategoryIDDeleteParams, _ error) {
	// Decode path: categoryID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "categoryID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CategoryID = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(params.CategoryID)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "categoryID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1AdminCategoriesCategoryIDPutParams is parameters of PUT /v1/admin/categories/{categoryID} operation.
type V1AdminCategoriesCategoryIDPutParams struct {
	// Уникальный идентификатор категории.
	CategoryID int
}

func unpackV1AdminCategoriesCategoryIDPutParams(packed middleware.Parameters) (params V1AdminCategoriesCategoryIDPutParams) {
	{
		key := middleware.ParameterKey{
			Name: "categoryID",
			In:   "path",
		}
		params.CategoryID = packed[key].(int)
	}
	return params
}

func decodeV1AdminCategoriesCategoryIDPutParams(args [1]string, argsEscaped bool, r *http.Request) (params V1AdminCategoriesCategoryIDPutParams, _ error) {
	// Decode path: categoryID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "categoryID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.CategoryID = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(params.CategoryID)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "categoryID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1AdminCategoriesGetParams is parameters of GET /v1/admin/categories operation.
type V1AdminCategoriesGetParams struct {
	// Номер страницы для пагинации.
	Page OptInt
	// Количество категорий на странице.
	PerPage OptInt
}

func unpackV1AdminCategoriesGetParams(packed middleware.Parameters) (params V1AdminCategoriesGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "per_page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PerPage = v.(OptInt)
		}
	}
	return params
}

func decodeV1AdminCategoriesGetParams(args [0]string, argsEscaped bool, r *http.Request) (params V1AdminCategoriesGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: page.
	{
		val := int(0)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Page.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: per_page.
	{
		val := int(20)
		params.PerPage.SetTo(val)
	}
	// Decode query: per_page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "per_page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PerPage.SetTo(paramsDotPerPageVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.PerPage.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "per_page",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
